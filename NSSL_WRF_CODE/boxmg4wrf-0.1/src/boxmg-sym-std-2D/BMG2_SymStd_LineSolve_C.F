      SUBROUTINE BMG2_SymStd_LineSolve_C( 
     &                A, B, C, F, RBUFF, RWORK, 
     &                NP, P, DATADIST, MY_ID
     &                )

C ==========================================================================
C  --------------------
C   DESCRIPTION:
C  --------------------
C
C     Solve the local tridiagonal systems.
C
C =======================================================================
C $license_flag$
C =======================================================================
C  --------------------
C   INPUT:
C  --------------------
C
C     P        - number of processes
C     NP       - number of unknowns (or equations) on this process
C     K        - number of tridiagonal systems
C
C =======================================================================
C  --------------------
C   OUTPUT:
C  --------------------
C
C
C
C =======================================================================
C  --------------------
C   LOCAL:
C  --------------------
C
C
C ==========================================================================

      IMPLICIT NONE

C -----------------------------
C     Includes
C

C ----------------------------
C     Argument Declarations
C 
      INTEGER MY_ID, NP, P
      REAL*RKIND A(NP), B(NP), C(NP), F(0:NP+1)
      INTEGER DATADIST( 1:2 , 0:(P-1) )      
      REAL*RKIND RBUFF(*), RWORK(*), L

C ----------------------------
C     Local Declarations
C
      INTEGER I, AT, FT

C ==========================================================================

      ! generate pointers into RWORK
      AT = 1
      FT = AT + NP + 2

      ! initialize the solution with the 
      ! solution to the interface equations
      IF (My_ID .GT. 0) THEN
         F(0)    = RBUFF(1)
      ENDIF

      F(1)    = RBUFF(2)
      F(NP)   = RBUFF(3)

      IF (MY_ID .LT. P-1) THEN
         F(NP+1) = RBUFF(4)
      ENDIF

      ! solve the on processor tridiagonal system by 
      ! forward and backsubstitution without modifying 
      ! A,B,C, and F this requires some workspace (RWORK)
      RWORK(FT+2) = F(2)-C(2)*F(1)
      RWORK(AT+2) = A(2)
      DO I=3,NP-2
         L = -C(I)/RWORK(AT+I-1)
         RWORK(AT+I) = A(I) + L*B(I-1)
         RWORK(FT+I) = F(I) + L*RWORK(FT+I-1)
      ENDDO
      L = -C(NP-1)/RWORK(AT+NP-2)
      RWORK(AT+NP-1) = A(NP-1) + L*B(NP-2)
      RWORK(FT+NP-1) = F(NP-1) - B(NP-1)*F(NP) + L*RWORK(FT+NP-2)

      F(NP-1) = RWORK(FT+NP-1)/RWORK(AT+NP-1)
      DO I=NP-2,2,-1
         F(I) = (RWORK(FT+I)-B(I)*F(I+1))/RWORK(AT+I)
      ENDDO

C ==========================================================================
      
      RETURN
      END


