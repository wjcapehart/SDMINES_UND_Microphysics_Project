      SUBROUTINE BMG3_SER_SymStd_SETUP_ITLI07_bl(
     &                SO, SOC, CI, IIF, JJF, KKF, IIC, JJC, KKC
     &                )

C ==========================================================================
C  --------------------
C   DESCRIPTION:
C  --------------------
C
C     Construct the variational coarse-grid operator for the case of 
C     a 7-point fine-grid discretization using the "block local" 
C     technique.
C
C =======================================================================
C $license_flag$
C =======================================================================
C  --------------------
C   INPUT:
C  --------------------
C
C
C =======================================================================
C  --------------------
C   INPUT/OUTPUT:
C  --------------------
C
C
C =======================================================================
C  --------------------
C   OUTPUT:
C  --------------------
C
C
C =======================================================================
C  --------------------
C   LOCAL:
C  --------------------
C
C
C ==========================================================================

      IMPLICIT NONE

C ----------------------------
C     Includes
C
#include       "BMG_SER_constants.h"
      INCLUDE 'BMG_SER_stencils.h'

C ----------------------------
C     Argument Declarations
C
      INTEGER IIC, IIF, JJC, JJF, KKC, KKF
      REAL*RKIND  CI(IIC,JJC,KKC,26), SO(IIF,JJF,KKF,4), 
     &        SOC(IIC,JJC,KKC,14)

C ----------------------------
C     Externals
C
      REAL*RKIND   BMG3_SER_SymStd_UTILS_reswt
      EXTERNAL BMG3_SER_SymStd_UTILS_reswt

C ----------------------------
C     Local Declarations
C
      INTEGER I, IC, IIC1, IIF1, IL, ILG, ILGP, J, JC, JJC1, JJF1, JL,
     &        JLG, JLGP, K, KC, KKC1, KKF1, KL, KLG, KLGP
      REAL*RKIND  Q(7,7,7), R(7,7,7)

C ==========================================================================

      IIC1 = IIC-1
      JJC1 = JJC-1
      KKC1 = KKC-1
      IIF1 = IIF-1
      JJF1 = JJF-1
      KKF1 = KKF-1

      K = 0

      DO KC = 2,KKC1

         K = K+2
         J = 0

         DO JC = 2,JJC1

            J = J+2
            I = 0

            DO IC= 2,IIC1

               I = I+2

               DO KL = 1,7
                  DO JL = 1,7
                     DO IL = 1,7
                        Q(IL,JL,KL) = rZERO
                        R(IL,JL,KL) = rZERO
                     ENDDO
                  ENDDO
               ENDDO

               !  XY-PLANE
               Q(4,4,4) = rONE
               Q(3,4,4) = CI(IC,JC,KC,LXYR)
               Q(5,4,4) = CI(IC+1,JC,KC,LXYL)
               Q(4,3,4) = CI(IC,JC,KC,LXYA)
               Q(4,5,4) = CI(IC,JC+1,KC,LXYB)
               Q(3,3,4) = CI(IC,JC,KC,LXYNE)
               Q(3,5,4) = CI(IC,JC+1,KC,LXYSE)
               Q(5,3,4) = CI(IC+1,JC,KC,LXYNW)
               Q(5,5,4) = CI(IC+1,JC+1,KC,LXYSW)

               !  XZ-PLANE
               Q(4,4,3) = CI(IC,JC,KC,LXZA)
               Q(4,4,5) = CI(IC,JC,KC+1,LXZB)
               Q(3,4,3) = CI(IC,JC,KC,LXZNE)
               Q(3,4,5) = CI(IC,JC,KC+1,LXZSE)
               Q(5,4,3) = CI(IC+1,JC,KC,LXZNW)
               Q(5,4,5) = CI(IC+1,JC,KC+1,LXZSW)

               !  YZ-PLANE
               Q(4,3,3) = CI(IC,JC,KC,LYZNW)
               Q(4,3,5) = CI(IC,JC,KC+1,LYZSW)
               Q(4,5,3) = CI(IC,JC+1,KC,LYZNE)
               Q(4,5,5) = CI(IC,JC+1,KC+1,LYZSE)

               !     CORNER     
               Q(3,3,3) = CI(IC,JC,KC,LTNE)
               Q(3,5,3) = CI(IC,JC+1,KC,LTSE)
               Q(5,3,3) = CI(IC+1,JC,KC,LTNW)
               Q(5,5,3) = CI(IC+1,JC+1,KC,LTSW)
               Q(3,3,5) = CI(IC,JC,KC+1,LBNE)
               Q(3,5,5) = CI(IC,JC+1,KC+1,LBSE)
               Q(5,3,5) = CI(IC+1,JC,KC+1,LBNW)
               Q(5,5,5) = CI(IC+1,JC+1,KC+1,LBSW)


               !  APPLY FINE-GRID OPERATOR

               DO KL = 2,6
                  DO JL = 2,6
                     DO IL = 2,6

                        ILG = I + IL - 4
                        JLG = J + JL - 4
                        KLG = K + KL - 4

                        ILGP = MIN(ILG+1,IIF)
                        JLGP = MIN(JLG+1,JJF)
                        KLGP = MIN(KLG+1,KKF)

                        ILG = MIN(ILG,IIF)
                        JLG = MIN(JLG,JJF)
                        KLG = MIN(KLG,KKF)

                        ILG = MAX(ILG,1)
                        JLG = MAX(JLG,1)
                        KLG = MAX(KLG,1)

                        R(IL,JL,KL) 
     &                  =   SO(ILG,JLG,KLG,KP)*Q(IL,JL,KL)
     &                    - SO(ILG,JLG,KLG,KPW)*Q(IL-1,JL,KL)
     &                    - SO(ILG,JLGP,KLG,KPS)*Q(IL,JL+1,KL)
     &                    - SO(ILGP,JLG,KLG,KPW)*Q(IL+1,JL,KL)
     &                    - SO(ILG,JLG,KLG,KPS)*Q(IL,JL-1,KL)
     &                    - SO(ILG,JLG,KLG,KB)*Q(IL,JL,KL-1)
     &                    - SO(ILG,JLG,KLGP,KB)*Q(IL,JL,KL+1)

                     ENDDO
                  ENDDO
               ENDDO  

               !  APPLY RESIDUAL WEIGHTING

               SOC(IC,JC,KC,KP) 
     &         =   BMG3_SER_SymStd_UTILS_reswt(
     &                  CI, R, IIC, JJC, KKC, IC, JC, KC, 4, 4, 4
     &                  )

               SOC(IC,JC,KC,KPW) 
     &         = - BMG3_SER_SymStd_UTILS_reswt(
     &                  CI, R, IIC, JJC, KKC, IC-1, JC, KC, 2, 4, 4
     &                  )
               
               SOC(IC,JC,KC,KPS) 
     &         = - BMG3_SER_SymStd_UTILS_reswt(
     &                  CI, R, IIC, JJC, KKC, IC, JC-1, KC, 4, 2, 4 
     &                  )
               
               SOC(IC,JC,KC,KPSW) 
     &         = - BMG3_SER_SymStd_UTILS_reswt(
     &                  CI, R, IIC, JJC, KKC, IC-1, JC-1, KC, 2, 2, 4 
     &                  )
               
               SOC(IC,JC+1,KC,KPNW) 
     &         = - BMG3_SER_SymStd_UTILS_reswt(
     &                  CI, R, IIC, JJC, KKC, IC-1, JC+1, KC, 2, 6, 4 
     &                  )
               
               SOC(IC,JC,KC,KB) 
     &         = - BMG3_SER_SymStd_UTILS_reswt(
     &                  CI, R, IIC, JJC, KKC, IC, JC, KC-1, 4, 4, 2 
     &                  )
               
               SOC(IC,JC,KC,KBSW) 
     &         = - BMG3_SER_SymStd_UTILS_reswt(
     &                  CI, R, IIC, JJC, KKC, IC-1, JC-1, KC-1, 2, 2, 2 
     &                  )
               
               SOC(IC,JC,KC,KBW) 
     &         = - BMG3_SER_SymStd_UTILS_reswt(
     &                  CI, R, IIC, JJC, KKC, IC-1, JC, KC-1, 2, 4, 2 
     &                  )

               SOC(IC,JC+1,KC,KBNW)
     &         = - BMG3_SER_SymStd_UTILS_reswt(
     &                  CI, R, IIC, JJC, KKC, IC-1, JC+1, KC-1, 2, 6, 2 
     &                  )
               
               SOC(IC,JC+1,KC,KBN)
     &         = - BMG3_SER_SymStd_UTILS_reswt(
     &                  CI, R, IIC, JJC, KKC, IC, JC+1, KC-1, 4, 6, 2 
     &                  )
               
               SOC(IC+1,JC+1,KC,KBNE)
     &          = - BMG3_SER_SymStd_UTILS_reswt(
     &                   CI, R, IIC, JJC, KKC, IC+1, JC+1, KC-1, 6, 6, 2 
     &                   )
               
               SOC(IC+1,JC,KC,KBE) 
     &         = - BMG3_SER_SymStd_UTILS_reswt(
     &                  CI, R, IIC, JJC, KKC, IC+1, JC, KC-1, 6, 4, 2 
     &                  )

               SOC(IC+1,JC,KC,KBSE)
     &         = - BMG3_SER_SymStd_UTILS_reswt(
     &                  CI, R, IIC, JJC, KKC, IC+1, JC-1, KC-1, 6, 2, 2 
     &                  )
               
               SOC(IC,JC,KC,KBS) 
     &         = -BMG3_SER_SymStd_UTILS_reswt( 
     &                 CI, R, IIC, JJC, KKC, IC, JC-1, KC-1, 4, 2, 2
     &                 )


            ENDDO  
         ENDDO  
      ENDDO

C ==========================================================================

      RETURN         
      END
